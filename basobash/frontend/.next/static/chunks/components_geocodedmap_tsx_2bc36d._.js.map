{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/OMEN/Desktop/hack2-a/basobash/frontend/Desktop/hack2-a/basobash/frontend/components/geocodedmap.tsx"],"sourcesContent":["\"use client\";\nimport React from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from \"react-leaflet\";\nimport { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\n// Fix Leaflet default icon paths\nL.Icon.Default.imagePath = \"/\";\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: \"marker-icon-2x.png\",\n  iconUrl: \"marker-icon.png\",\n  shadowUrl: \"marker-shadow.png\",\n});\n\nconst GEOAPIFY_API_KEY = \"1f3eec48fa604cf7b262e4d4ba1d004c\";\n\ninterface Location {\n  lat: number;\n  lon: number;\n  name: string;\n}\n\ninterface Feature {\n  geometry: { coordinates: [number, number] };\n  properties: { formatted: string };\n}\n\n// Search Bar with Geoapify Autocomplete\nconst SearchBarWithAutocomplete = ({\n  onLocationSelected,\n}: {\n  onLocationSelected: (location: Location) => void;\n}) => {\n  const [query, setQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<Feature[]>([]);\n\n  const fetchSuggestions = async (searchText: string) => {\n    if (!searchText) {\n      setSuggestions([]);\n      return;\n    }\n    const url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(\n      searchText\n    )}&apiKey=${GEOAPIFY_API_KEY}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      setSuggestions(data.features || []);\n    } catch (error) {\n      console.error(\"Error fetching Geoapify suggestions:\", error);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n    fetchSuggestions(e.target.value);\n  };\n\n  const handleSuggestionClick = (feature: Feature) => {\n    const [lon, lat] = feature.geometry.coordinates;\n    onLocationSelected({ lat, lon, name: feature.properties.formatted });\n    setSuggestions([]);\n    setQuery(feature.properties.formatted);\n  };\n\n  return (\n    <div className=\"relative w-full max-w-md mx-auto z-50\">\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Search for a location...\"\n        className=\"relative w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      />\n      {suggestions.length > 0 && (\n        <ul className=\"absolute z-[60] text-black text-left bg-white w-full shadow-lg rounded-lg mt-1 max-h-60 overflow-y-auto\">\n          {suggestions.map((feature, index) => (\n            <button\n              key={index}\n              className=\"p-2 text-left hover:bg-gray-100 cursor-pointer z-20\"\n              onClick={() => handleSuggestionClick(feature)}\n              onKeyDown={(e) =>\n                e.key === \"Enter\" && handleSuggestionClick(feature)\n              }\n              tabIndex={0}\n            >\n              {feature.properties.formatted}\n            </button>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\n// Map Component to Pan and Update Marker\nconst PanAndMarker = ({ location }: { location: Location }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (location) {\n      const { lat, lon } = location;\n      map.flyTo([lat, lon], 17, { animate: true });\n    }\n  }, [map, location]);\n\n  return location ? (\n    <Marker position={[location.lat, location.lon]}>\n      <Popup>\n        {location.name}\n        <span className=\"block mt-2\">\n          {location.lat}\n          {location.lon}{\" \"}\n        </span>\n      </Popup>\n    </Marker>\n  ) : null;\n};\n\nconst GeocodedMap = () => {\n  const [mapVisible, setMapVisible] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState<Location | null>(\n    null\n  );\n\n  const handleLocationSelected = (location: Location) => {\n    setSelectedLocation(location);\n    setMapVisible(true);\n  };\n\n  return (\n    <>\n      <div className=\"flex justify-center w-full py-5\">\n        <SearchBarWithAutocomplete\n          onLocationSelected={handleLocationSelected}\n        />\n      </div>\n      <div className=\"h-[500px] flex flex-col items-center justify-start\">\n        {/* Search Bar */}\n\n        {/* Map */}\n        {mapVisible && selectedLocation && (\n          <div className=\"w-full z-10 h-full\">\n            <MapContainer\n              center={[selectedLocation.lat, selectedLocation.lon]}\n              zoom={16}\n              style={{ height: \"100%\", width: \"100%\" }}\n            >\n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n              />\n              <PanAndMarker location={selectedLocation} />\n            </MapContainer>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default GeocodedMap;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}